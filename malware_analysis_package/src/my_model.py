# -*- coding: utf-8 -*-
"""My_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FKrfik4x6_eu5o6C40MP7HnFjaZ43UMD
"""

import pickle

import joblib
import numpy as np
import pandas as pd
from sklearn import ensemble as ske
# import sklearn.ensemble as ske
from sklearn import tree
from sklearn.feature_selection import SelectFromModel
from sklearn.metrics import confusion_matrix
from sklearn.naive_bayes import GaussianNB

data = pd.read_csv('data.csv')
X = data.drop(['Name', 'md5', 'legitimate'], axis=1).values
y = data['legitimate'].values

"""Feature Selection"""

fsel = ske.ExtraTreesClassifier().fit(X, y)
model = SelectFromModel(fsel, prefit=True)
X_new = model.transform(X)
nb_features = X_new.shape[1]

"""Splitting into training and testing"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_new, y, test_size=0.35, random_state=42)

features = []

print('there are %i features identified as important:' % nb_features)

indices = np.argsort(fsel.feature_importances_)[::-1][:nb_features]
for f in range(nb_features):
    print("%d. feature %s (%f)" % (f + 1, data.columns[2 + indices[f]], fsel.feature_importances_[indices[f]]))

for f in sorted(np.argsort(fsel.feature_importances_)[::-1][:nb_features]):
    features.append(data.columns[2 + f])

algorithms = {
    "DecisionTree": tree.DecisionTreeClassifier(max_depth=10),
    "RandomForest": ske.RandomForestClassifier(n_estimators=50),
    "GradientBoosting": ske.GradientBoostingClassifier(n_estimators=50),
    "AdaBoost": ske.AdaBoostClassifier(n_estimators=100),
    "GNB": GaussianNB()
}

results = {}
print("\nNow testing algorithms")
for algo in algorithms:
    clf = algorithms[algo]
    clf.fit(X_train, y_train)
    score = clf.score(X_test, y_test)
    print("%s : %f %%" % (algo, score * 100))
    results[algo] = score

winner = max(results, key=results.get)
print('\nWinner algorithm is %s with a %f %% success' % (winner, results[winner] * 100))

print('Saving algorithm and feature list in classifier directory...')
joblib.dump(algorithms[winner], 'saved_model/classifier_03.pkl')

filename = 'features/features_02.pk1'
pickle.dump(features, open(filename, 'wb'))
# open('features.pkl', 'w').write(pickle.dumps(features))
print('Saved')

predictor = algorithms[winner]
result = predictor.predict(X_test)
matrix = confusion_matrix(y_test, result)
print("False positive rate : %f %%" % ((matrix[0][1] / float(sum(matrix[0]))) * 100))
print('False negative rate : %f %%' % (matrix[1][0] / float(sum(matrix[1])) * 100))
